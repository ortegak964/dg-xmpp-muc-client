import '/gi/repository/Gdk'
import '/gi/repository/Gtk'

import 'theme/TextBuffer'


MUCWidget = (self room onmessage onpresence) -> Gtk.Paned.with
  orientation: Gtk.Orientation.VERTICAL

  Gtk.Paned.with
    hexpand: True
    vexpand: True

    Gtk.Frame.scrollable view hexpand: True vexpand: True auto_rewind: True where
      buffer = TextBuffer!
      view   = Gtk.TextView.linkifyable
        editable:       False
        cursor_visible: False
        buffer:         buffer
        wrap_mode:      Gtk.WrapMode.WORD

      onpresence.connect $ x -> switch
        x.type != 'error'                     = buffer.append_muc_status x.nick x.type
        x.nick == self.muc.ourNicks !! x.room = buffer.append_muc_error x.error x.nick

      onmessage.connect x ->
        buffer.append_muc_message x.body x.nick x.subject (self.muc.ourNicks !! room in x.body)

    Gtk.Frame.scrollable roster vexpand: True where

      roster = Gtk.TreeView model where
        # status :: str -> str
        #
        # Get an icon name given a presence type.
        #
        status = x -> (dict
          dnd:  'empathy-busy'
          away: 'empathy-away'
          xa:   'empathy-extended-away'
        ).get x 'empathy-available'

        model = Gtk.ListStore str str
        model.set_sort_column_id 0 Gtk.SortType.ASCENDING

        onpresence.connect p ->
          # 1. Remove the old entry.
          for (model.find p.nick 0) (model !!~)
          # 2. Add the same entry.
          #    (Easier than checking if there's already one.)
          model.append (p.nick, status p.type) if p.type != 'unavailable'

      roster.set_headers_visible False
      roster.append_column $ Gtk.TreeViewColumn '' Gtk.CellRendererPixbuf! icon_name: 1
      roster.append_column $ Gtk.TreeViewColumn '' Gtk.CellRendererText!   text: 0

  Gtk.Frame.scrollable entry hexpand: True where
    # send' :: TextBuffer -> () -- actually do something with the message
    # send  :: TextBuffer -> () -- delegate to `send'` and clear the entry field
    send' = b -> ()
    send  = b -> b.set_text '' where send' b

    onpresence.connect $ x -> switch
      x.nick != self.muc.ourNicks !! x.room = False
      # Allow to send messages after successfully joining the MUC.
      x.type != 'error' = send' = b -> self.send_message room b.props.text mtype: 'groupchat'
      # On certain errors, this field may act differently.
      x.error == 'conflict'       = send' = b -> self.muc.joinMUC x.room b.props.text maxhistory: '20'
      x.error == 'not-authorized' = send' = b -> self.muc.joinMUC x.room x.nick password: b.props.text maxhistory: '20'

    entry = Gtk.TextView.with_key_hooks editable: True wrap_mode: Gtk.WrapMode.WORD
      Gdk.KEY_Return, w -> send w.props.buffer
      Gdk.KEY_Tab,    w -> w.props.buffer.autocomplete $ map (+ ', ') $ self.muc.rooms !! room
