import '/hashlib/md5'
import '/time/strftime'

import '/gi/repository/Gdk'
import '/gi/repository/Gtk'
import '/gi/repository/Pango'

import '../gtktools/wsignals'


MUCWidget = (self room initstanza) -> wsignals $ (message presence) -> Gtk.Paned.with
  orientation: Gtk.Orientation.VERTICAL

  Gtk.Paned.with
    hexpand: True
    vexpand: True

    Gtk.Frame.scrollable view hexpand: True vexpand: True auto_rewind: True where
      # colorify :: str -> str
      #
      # Generate a preudorandom color given a seed string.
      # Luminance of that color is capped at 0.5.
      #
      colorify = x ->
        r, g, b = take 3 $ (md5 $ x.encode 'utf-8').digest!
        m = min 0 (127 - 0.299 * r - 0.587 * g - 0.114 * b)
        '#{:0>2x}{:0>2x}{:0>2x}'.format *: (map (bind max 0 <- round m +) (r, g, b))

      view = Gtk.TextView.linkifyable
        editable:       False
        cursor_visible: False
        wrap_mode:      Gtk.WrapMode.WORD

      buffer = view.props.buffer
      time      = buffer.tag foreground: '#777777'
      highlight = buffer.tag foreground: '#990011'
      text      = buffer.tag foreground: '#333333'
      system    = buffer.tag foreground: '#dd4400' style:  Pango.Style.ITALIC
      ntag = n -> buffer.tag ('n#' + n) foreground: (colorify n) weight: Pango.Weight.BOLD
      mtag = n -> buffer.tag ('m#' + n) foreground: (colorify n) style:  Pango.Style.ITALIC

      buffer.emotes = dict'
        ':)',  'face-smile'
        ':-)', 'face-smile'
        ':D',  'face-laugh'
        ':-D', 'face-laugh'
        ':(',  'face-sad'
        ':-(', 'face-sad'
        ":'(", 'face-crying'
        ':|',  'face-plain'
        ':-|', 'face-plain'
        ':<',  'face-worried'

      online = set!

      presence.append $ x -> switch
        x.type == 'unavailable' =
          buffer.append (strftime '\n%H:%M:%S âˆ’') time
          buffer.append x.nick $ ntag x.nick
          online.remove x.nick

        not (x.nick in online) =
          buffer.append (strftime '\n%H:%M:%S +') time
          buffer.append x.nick $ ntag x.nick
          online.add x.nick

      message.append x ->
        x.time = strftime '\n%H:%M:%S '

        switch
          x.subject =
            buffer.append  x.time time
            buffer.append  x.nick system
            buffer.append  ' has set the subject to: ' system
            buffer.linkify x.subject system

          x.nick == '' =  # Server-issued message.
            buffer.append  x.time time
            buffer.linkify x.body system

          x.body.startswith '/me ' =  # Self-referencing message.
            buffer.append   x.time                    time
            buffer.append  (x.nick + ' ')           $ mtag x.nick
            buffer.linkify (x.body !! slice 4 None) $ mtag x.nick

          self.muc.ourNicks !! room in x.body =  # Highlighted message.
            buffer.append  x.time   highlight
            buffer.append  x.nick $ ntag x.nick
            buffer.append  ': '     time
            buffer.linkify x.body   text

          True =  # Boring stuff you shouldn't read.
            buffer.append  x.time   time
            buffer.append  x.nick $ ntag x.nick
            buffer.append  ': '     time
            buffer.linkify x.body   text

    Gtk.Frame.scrollable roster vexpand: True where

      roster = Gtk.TreeView model where
        # status :: str -> str
        #
        # Get an icon name given a presence type.
        #
        status = x -> (dict
          dnd:  'empathy-busy'
          away: 'empathy-away'
          xa:   'empathy-extended-away'
        ).get x 'empathy-available'

        model = Gtk.ListStore str str
        model.set_sort_column_id 0 Gtk.SortType.ASCENDING

        presence.append p ->
          # 1. Remove the old entry.
          for (model.find p.nick 0) (model !!~)
          # 2. Add the same entry.
          #    (Easier than checking if there's already one.)
          model.append (p.nick, status p.type) if p.type != 'unavailable'

      roster.set_headers_visible False
      roster.append_column $ Gtk.TreeViewColumn '' Gtk.CellRendererPixbuf! icon_name: 1
      roster.append_column $ Gtk.TreeViewColumn '' Gtk.CellRendererText!   text: 0

  Gtk.Frame.scrollable entry hexpand: True where
    # send :: TextBuffer -> bool
    #
    # Send a message to the active room, return True.
    #
    send = b -> b.set_text '' where self.send_message room b.props.text mtype: 'groupchat'

    entry = Gtk.TextView editable: True wrap_mode: Gtk.WrapMode.WORD
    entry.connect 'key-press-event' $ (w ev) -> switch
      # `Return` sends the message.
      # `Tab` autocompletes a nickname at the start of the message.
      # Using any of these with `Shift` reverts them to their original action.
      ev.state & Gdk.ModifierType.SHIFT_MASK = False
      ev.keyval == Gdk.KEY_Return = True where send w.props.buffer
      ev.keyval == Gdk.KEY_Tab    = True where w.props.buffer.autocomplete
        map (+ ', ') $ self.muc.rooms !! room
