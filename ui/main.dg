import '/collections/defaultdict'

import '/gi/repository/Gtk'

import '../gtktools/delegate'

import 'muc/MUCWidget'
import 'login/LoginWidget'
import 'error/ErrorWidget'


MainWindow = (username password rooms) -> wnd where
  self = None

  wnd = Gtk.Window.with tabs where
    tabs = Gtk.Notebook show_border: False tab_pos: Gtk.PositionType.BOTTOM

    toks = defaultdict list
    nums = dict!
    wgts = dict!

    login = LoginWidget username password rooms
    login.show_all!
    login.connect 'login' (_ client) ->
      self = client
      self.add_event_handler 'join' $ delegate $ (room, nick) -> room in nums or
        wgts !! room = w = MUCWidget self room $ toks !! room
        nums !! room = n = tabs.append_page w grid where
          close = Gtk.Image.new_from_stock Gtk.STOCK_CLOSE Gtk.IconSize.MENU

          button = Gtk.Button.with close focus_on_click: False relief: Gtk.ReliefStyle.NONE
          button.connect 'clicked' $ _ -> self.event 'leave' room

          grid = Gtk.Grid.with (Gtk.Label room) button
          grid.show_all!

        self.muc.joinMUC room nick maxhistory: '20'

      self.add_event_handler 'leave' $ delegate $ room -> room in nums and
        self.muc.leaveMUC room (self.muc.ourNicks !! room)
        self.dissociate  $ toks.pop room
        tabs.remove_page $ nums.pop room
        wgts.pop room

      self.add_event_handler 'groupchat_presence' $ delegate $ p -> switch
        self.muc.ourNicks !! p.room != p.nick = None
        p.type == 'error' = tabs.replace_page (nums !! p.room) $ ErrorWidget self p
        p.type != 'error' = tabs.replace_page (nums !! p.room) $ wgts !! p.room

      self.process! if self.connect!

    tabs.append_page login (Gtk.Label '+')

  wnd.connect 'delete-event' Gtk.main_quit
  wnd.connect 'delete-event' (_ _) -> (self.disconnect! if self)
  wnd.show_all!
