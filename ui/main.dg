import '/gi/repository/Gtk'

import '../gtktools/delegate'

import 'muc/MUCWidget'
import 'chat/ChatWidget'
import 'login/LoginWidget'
import 'error/ErrorWidget'


TabLabel = (self text callback) -> grid where
  close  = Gtk.Image.new_from_stock Gtk.STOCK_CLOSE Gtk.IconSize.MENU
  button = Gtk.Button.with close focus_on_click: False relief: Gtk.ReliefStyle.NONE
  button.connect 'clicked' $ callback
  grid = Gtk.Grid.with (Gtk.Label text) button
  grid.show_all!


MainWindow = (username password rooms) -> wnd where
  self = None

  wnd = Gtk.Window.with tabs where
    tabs = Gtk.Notebook show_border: False tab_pos: Gtk.PositionType.BOTTOM
    tabs.set_scrollable True

    nums = dict!
    wgts = dict!

    add_page = (Type target onquit source) ->
      wgts !! target = w = Type self target source
      nums !! target = n = tabs.append_page w $ TabLabel self (str target) _ ->
        onquit target
        tabs.remove_page $ nums.pop target
        nums.pop target

      w.show_all!
      tabs.set_current_page n

    leave_muc = room ->
      self.muc.leaveMUC room (self.muc.ourNicks !! room)

    login = LoginWidget username password rooms
      client ->
        self = client
        self.add_event_handler 'message' $ delegate $ m -> switch
          m.to   in wgts = (wgts !! m.to  ).message m
          m.from in wgts = (wgts !! m.from).message m
          m.room in wgts = (wgts !! m.room).message m
          m.type == 'groupchat' = add_page MUCWidget m.room leave_muc m
          m.type == 'chat'      = add_page ChatWidget m.from _ -> _ m
          m.type == 'normal'    = add_page ChatWidget m.from _ -> _ m

        self.add_event_handler 'presence' $ delegate $ p -> switch
          p.from in wgts = (wgts !! p.from).presence p
          p.room in wgts =
            (wgts !! p.room).presence p
            switch
              self.muc.ourNicks !! p.room != p.nick = None
              p.type == 'error' = tabs.replace_page (nums !! p.room) $ ErrorWidget self p
              p.type != 'error' = tabs.replace_page (nums !! p.room) $ wgts !! p.room

          p.room in self.muc.ourNicks = add_page MUCWidget p.room leave_muc p

        self.process! if self.connect!

      (room nick pwd) ->
        self.muc.joinMUC room nick password: pwd maxhistory: '20'

    #tabs.append_page login (Gtk.Label '+')
    #login.show_all!

  wnd.connect 'delete-event' Gtk.main_quit
  wnd.connect 'delete-event' (_ _) -> (self.disconnect! if self)
  wnd.show_all!
