import '/gi/repository/Gtk'

import '../gtktools/delegate'

import 'muc/MUCWidget'
import 'chat/ChatWidget'
import 'login/LoginWidget'


MainWindow = (username password rooms) -> wnd where
  self = None

  wnd = Gtk.Window.with tabs where
    tabs = Gtk.Notebook show_border: False tab_pos: Gtk.PositionType.BOTTOM
    tabs.set_scrollable True

    nums = list' None
    wgts = dict!

    add_page = (Type target onquit source) ->
      wgts !! target = w = Type self target source

      nums.append target
      n = tabs.append_page w grid where
        close  = Gtk.Image.new_from_stock Gtk.STOCK_CLOSE Gtk.IconSize.MENU
        button = Gtk.Button.with close focus_on_click: False relief: Gtk.ReliefStyle.NONE
        button.connect 'clicked' _ ->
          onquit target
          tabs.remove_page $ nums.index target
          nums !!~ nums.index target
          wgts.pop target

        grid = Gtk.Grid.with (Gtk.Label $ str target) button
        grid.show_all!

      w.show_all!
      tabs.set_current_page n

    leave_muc = room ->
      self.muc.leaveMUC room (self.muc.ourNicks !! room)

    login = LoginWidget username password rooms client ->
      self = client
      self.add_event_handler 'message' $ delegate $ m -> switch
        m.from in wgts = (wgts !! m.from).message m
        m.room in wgts = (wgts !! m.room).message m
        m.type == 'groupchat' = add_page MUCWidget m.room leave_muc m
        m.type == 'chat'      = add_page ChatWidget m.from _ -> _ m
        m.type == 'normal'    = add_page ChatWidget m.from _ -> _ m

      self.add_event_handler 'presence' $ delegate $ p -> switch
        p.from in wgts = (wgts !! p.from).presence p
        p.room in wgts = (wgts !! p.room).presence p
        p.room in self.muc.ourNicks = add_page MUCWidget p.room leave_muc p

      self.process! if self.connect!

    tabs.append_page login (Gtk.Label '+')
    login.show_all!

  wnd.connect 'delete-event' Gtk.main_quit
  wnd.connect 'delete-event' (_ _) -> (self.disconnect! if self)
  wnd.show_all!
