import '/gi/repository/Gtk'

import '../gtktools/delegate'
import '../xmpptools/ClientXMPP'
import '../xmpptools/Message'

import 'muc/MUCWidget'
import 'chat/ChatWidget'


Signal = inherit list $
  emit    = (self *: a **: k) -> exhaust $ map f -> (f *: a **: k) self
  connect = list.append


MainWindow = (app getclient rooms) -> wnd where
  clients = dict!

  wnd = Gtk.ApplicationWindow.new app
  wnd.add tabs where
    signals = dict!

    tabs = Gtk.Notebook show_border: False tab_pos: Gtk.PositionType.BOTTOM
    tabs.set_scrollable True

    add_page = (self typestring Type target onquit source) ->
      sgn = signals !! (self, typestring, target) = dict
        onmessage:  Signal!
        onpresence: Signal!

      w = Type self target **: sgn
      w.show_all!

      tabs.set_current_page $ tabs.append_page w grid where
        close  = Gtk.Image.new_from_stock Gtk.STOCK_CLOSE Gtk.IconSize.MENU
        button = Gtk.Button.with close focus_on_click: False relief: Gtk.ReliefStyle.NONE
        button.connect 'clicked' _ ->
          onquit self target
          tabs.remove_page $ tabs.page_num w
          signals.pop (self, typestring, target)

        grid = Gtk.Grid.with (Gtk.Label $ str target) button
        grid.show_all!

      (sgn !! ('onmessage' if source :: Message else 'onpresence')).emit source

    leave_muc = (self room) ->
      self.muc.leaveMUC room (self.muc.ourNicks !! room)

    wnd.onclient = self ->
      self.add_event_handler 'message' $ delegate $ m -> switch
        (self, 'chat', m.from) in signals = (signals !! (self, 'chat', m.from) !! 'onmessage').emit m
        (self, 'muc',  m.room) in signals = (signals !! (self, 'muc',  m.room) !! 'onmessage').emit m
        m.type == 'groupchat' = add_page self 'muc'  MUCWidget  m.room leave_muc m
        m.type == 'chat'      = add_page self 'chat' ChatWidget m.from (_ _) -> _ m
        m.type == 'normal'    = add_page self 'chat' ChatWidget m.from (_ _) -> _ m

      self.add_event_handler 'presence' $ delegate $ p -> switch
        (self, 'chat', p.from) in signals = (signals !! (self, 'chat', p.from) !! 'onpresence').emit p
        (self, 'muc',  p.room) in signals = (signals !! (self, 'muc',  p.room) !! 'onpresence').emit p
        p.room in self.muc.ourNicks = add_page self 'muc' MUCWidget p.room leave_muc p

  wnd.connect 'destroy' $ _ -> for clients.values! ClientXMPP.disconnect

  for rooms (username, password, room', nick', pwd) ->
    self = getclient username password
    self.muc.joinMUC room' nick' password: pwd maxhistory: '20'
