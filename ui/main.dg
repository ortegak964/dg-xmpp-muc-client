import '/gi/repository/Gtk'

import '../gtktools/delegate'
import '../xmpptools/ClientXMPP'
import '../xmpptools/Message'

import 'muc/MUCWidget'
import 'chat/ChatWidget'
import 'login/LoginWidget'


Signal = inherit list $
  emit    = (self *: a **: k) -> exhaust $ map f -> (f *: a **: k) self
  connect = list.append


MainWindow = rooms -> wnd where
  clients = dict!

  wnd = Gtk.Window.with tabs where
    signals = dict!

    tabs = Gtk.Notebook show_border: False tab_pos: Gtk.PositionType.BOTTOM
    tabs.set_scrollable True

    add_page = (self typestring Type target onquit source) ->
      signals !! (self, typestring, target) = dict
        onmessage:  (onmsg = Signal!)
        onpresence: (onprs = Signal!)

      w = Type self target onmsg onprs
      w.show_all!

      tabs.set_current_page $ tabs.append_page w grid where
        close  = Gtk.Image.new_from_stock Gtk.STOCK_CLOSE Gtk.IconSize.MENU
        button = Gtk.Button.with close focus_on_click: False relief: Gtk.ReliefStyle.NONE
        button.connect 'clicked' _ ->
          onquit self target
          tabs.remove_page $ tabs.page_num w
          signals.pop (self, typestring, target)

        grid = Gtk.Grid.with (Gtk.Label $ str target) button
        grid.show_all!

      onmsg.emit source if source :: Message else onprs.emit source

    leave_muc = (self room) ->
      self.muc.leaveMUC room (self.muc.ourNicks !! room)

    login = LoginWidget rooms (username password) ->
     clients !! username if username in clients else
      self = clients !! username = ClientXMPP username password
      self.register_plugin 'xep_0030'
      self.register_plugin 'xep_0045'
      self.register_plugin 'xep_0199'

      self.add_event_handler 'session_start' _ ->
        self.get_roster!
        self.send_presence!

      self.add_event_handler 'message' $ delegate $ m -> switch
        (self, 'chat', m.from) in signals = (signals !! (self, 'chat', m.from) !! 'onmessage').emit m
        (self, 'muc',  m.room) in signals = (signals !! (self, 'muc',  m.room) !! 'onmessage').emit m
        m.type == 'groupchat' = add_page self 'muc'  MUCWidget  m.room leave_muc m
        m.type == 'chat'      = add_page self 'chat' ChatWidget m.from (_ _) -> _ m
        m.type == 'normal'    = add_page self 'chat' ChatWidget m.from (_ _) -> _ m

      self.add_event_handler 'presence' $ delegate $ p -> switch
        (self, 'chat', p.from) in signals = (signals !! (self, 'chat', p.from) !! 'onpresence').emit p
        (self, 'muc',  p.room) in signals = (signals !! (self, 'muc',  p.room) !! 'onpresence').emit p
        p.room in self.muc.ourNicks = add_page self 'muc' MUCWidget p.room leave_muc p

      self.process! if self.connect!
      self

    tabs.append_page login (Gtk.Label '+')
    login.show_all!

  wnd.connect 'delete-event' Gtk.main_quit
  wnd.connect 'delete-event' (_ _) -> (for clients.values! ClientXMPP.disconnect)
  wnd.show_all!
