import '../gtktools/Gtk'
import '../gtktools/delegate'
import '../xmpptools/Message'

import 'muc/MUCWidget'
import 'chat/ChatWidget'


Signal = inherit list $
  emit    = (self *: a **: k) -> exhaust $ map f -> (f *: a **: k) self
  connect = list.append


MainWindow = app -> wnd where
  signals = dict!

  tabs = Gtk.Notebook show_border: False tab_pos: Gtk.PositionType.BOTTOM
  tabs.set_scrollable True

  wnd = Gtk.ApplicationWindow.new app
  wnd.add tabs

  add_page = (self t target source onquit: None) ->
    onmessage  = Signal!
    onpresence = Signal!
    signals !! (self, t, target, 'msg') = onmessage.emit
    signals !! (self, t, target, 'prs') = onpresence.emit

    w = t self target onmessage onpresence
    w.show_all!

    tabs.set_current_page $ tabs.append_page w grid where
      pixmap = Gtk.Image.new_from_stock Gtk.STOCK_CLOSE Gtk.IconSize.MENU
      button = Gtk.Button.with pixmap focus_on_click: False relief: Gtk.ReliefStyle.NONE
      button.connect 'clicked'  _ ->
        onquit self target if onquit
        tabs.remove_page $ tabs.page_num w
        signals.pop (self, t, target, 'msg')
        signals.pop (self, t, target, 'prs')

      grid = Gtk.Grid.with (Gtk.Label $ str target) button
      grid.show_all!

    (onmessage if source :: Message else onpresence).emit source

  wnd.onclient = self ->
    addNormalChat = m -> add_page self ChatWidget m.from m
    addGroupChat  = m -> add_page self MUCWidget  m.room m (self room) ->
      self.muc.leaveMUC room (self.muc.ourNicks !! room) if room in self.muc.ourNicks

    self.add_event_handler 'message' $ delegate $ m -> switch
      m.type == 'groupchat' = (signals.get (self, MUCWidget,  m.room, 'msg') addGroupChat)  m
      m.type == 'normal'    = (signals.get (self, ChatWidget, m.from, 'msg') addNormalChat) m
      m.type == 'chat'      = (signals.get (self, ChatWidget, m.from, 'msg') addNormalChat) m

    self.add_event_handler 'presence' $ delegate $ p ->
      f = p -> (addGroupChat p if p.type != 'unavailable' and p.room in self.muc.ourNicks)
      (signals.get (self, MUCWidget,  p.room, 'prs') f)  p
      (signals.get (self, ChatWidget, p.from, 'prs') id) p
