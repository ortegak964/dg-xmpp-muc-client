import '/sleekxmpp/StanzaBase'
import '/sleekxmpp/Message'
import '/sleekxmpp/Presence'
import '/sleekxmpp/ClientXMPP'


# _ :: a
#
# Aliases for various stanza fields.
#
StanzaBase.from = property $ !! 'from'
StanzaBase.to   = property $ !! 'to'
StanzaBase.type = property $ !! 'type'
Message.body    = property $ !! 'body'
Message.nick    = property $ !! 'mucnick'
Message.room    = property $ !! 'mucroom'
Message.subject = property $ !! 'subject'
Presence.type   = property $ !! 'type'
Presence.nick   = property $ !! 'nick' <- !! 'muc'
Presence.room   = property $ !! 'room' <- !! 'muc'
Presence.error  = property $ !! 'condition' <- !! 'error'


# muc :: XEP_0045
#
# Alias for `self.plugin !! 'xep_0045'`.
#
ClientXMPP.muc = property $ !! 'xep_0045' <- `getattr` 'plugin'


# associate :: (list, str, * -> a, **) -> ()
#
# Subscribe to an event, add info about it to some list.
#
ClientXMPP.associate = (self data name f **: k) ->
  self.add_event_handler name f **: k
  data.append (name, f)


# dissociate :: list -> ()
#
# Unsubscribe from all events in a list.
#
ClientXMPP.dissociate = (self data) ->
  for data (name, f) -> (self.del_event_handler name f)
